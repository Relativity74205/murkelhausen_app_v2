# generated by datamodel-codegen:
#   filename:  station.json
#   timestamp: 2023-08-06T19:19:13+00:00

from __future__ import annotations

from pydantic import BaseModel


class Coords(BaseModel):
    lat: str | None
    long: str | None


class Elevator(BaseModel):
    trafficInfos: list
    stops: list
    name: str
    additionalInfo: str
    cabinWidth: int
    cabinLength: int
    doorWidth: int
    isWorking: int
    modificationDate: str
    coords: Coords


class Escalator(BaseModel):
    trafficInfos: list
    stops: list
    name: str
    additionalInfo: str
    isWorking: int
    modificationDate: str
    coords: Coords


class Stop(BaseModel):
    trafficInfos: list
    elevators: list[Elevator]
    escalators: list[Escalator]
    name: str
    additionalName: str
    isAccessible: bool
    hasTactileStrip: bool
    hasRamp: bool
    hasMobileRamp: bool
    coords: Coords


class Station(BaseModel):
    trafficInfos: list  # find out what this is; always empty, is there something like a TrafficInfo project?
    elevators: list[Elevator]
    escalators: list[Escalator]
    stops: list[Stop]
    id: str
    globalID: str
    name: str
    city: str
    coords: Coords
    type: str
    stationPlanUrl: str
    isAccessible: bool | None = None


class StationModel(BaseModel):
    stations: list[Station]

    def get_station_id(self, station_name: str, city: str) -> str:
        try:
            return next(
                station.id
                for station in self.stations
                if station.name == station_name and station.city == city
            )
        except StopIteration:
            raise ValueError(f"Station with id {station_name} not found")
